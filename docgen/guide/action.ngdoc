@ngdoc overview
@name Guide: Action Object
@description

### Overview
The `Action Object` is an object created internally, usually as a reuilt of parsing the column data in a static {@link /guide/table Table} definition.  It is used to attach the user click interactions to a function within
system and to which a context is passed. Most often a {@link /guide/data Data Object} is associated with this context.  The Triangular system is able to
add the clickable function reference to the `$scope` and thereby cause the function to be successfully accessed.

The format of the `Action Object` is defined in the next section.

### Format

<style type="text/css">
  code.srp-label {display:inline-block; width:100px; margin-left:-100px;}
  span.srp-propdef {display:inline-block; margin-left:100px;}
</style>
The implementation of the `Action Object` uses a dynamicaly built Javascript object.  The following properties are attached.

<span class=srp-propdef><code class=srp-label>click:</code>The
method text to insert into the 'onclick' field of the `<a onclick=...>` element inserted into the browser page.  It assumes the
method is available and hooked in via the `method` property.
<br><br>
An improved implementation causes the Triangular system to search for the click function and automatically hook it into the
current $scope.  This means the `method` preoperty (apart from compile time access checking) is optional.
</span>

<span class=srp-propdef><code class=srp-label>label:</code>For other action definitions the `label` property is used as the link text in the `<a ...>link text</a>`
built with the manufactured `Action Object`.
</span>

<span class=srp-propdef><code class=srp-label>methClass:</code>The
name of the method the `whatClass` propety will call.  Since the Javascript compiler will look for this method (assuming
"use strict" is in effect), the function must be in scope.  The Triangular system will hook this into the current context so the
click action will execute the appropriate function.
</span>

<span class=srp-propdef><code class=srp-label>method:</code>The
name of the method the `click` function will call.  Since the Javascript compiler will look for this method (assuming
"use strict" is in effect), the function must be in scope.  The Triangular system will hook this into the current context so the
click action will execute the appropriate function.
</span>

<span class=srp-propdef><code class=srp-label>name:</code>For columns that specify a type of 'actions', the associated array of
'action' definitions is used to manufacture `Action Object` objects.  The `name` property is used as the link text in the `<a ...>link text</a>`
built with the manufactured `Action Object`.
</span>

<span class=srp-propdef><code class=srp-label>whatClass:</code>The
method text to insert into the 'ng-class' field of the `<a onclick=...>` element inserted into the browser page.  It assumes the
method is available and hooked in via the `methClass` property.
<br><br>
An improved implementation causes the Triangular system to search for the whatClass function and automatically hook it into the
current $scope.  This means the `methClass` property (apart from compile time access checking) is optional.
</span>


